{"version":3,"sources":["constants.js","Components/CurrencyWidget/index.js","App.js","serviceWorker.js","index.js"],"names":["CurrencyTypes","CurrencyWidget","props","className","title","type","onChange","onInputChange","placeholder","inputPlaceholder","value","inputValue","disabled","inputDisabled","onCurrencyTypeChange","map","index","key","App","useState","inputAmount","setInputAmount","outputAmount","setOutputAmount","inputTypeCurrency","setInputTypeCurrency","outputTypeCurrency","setOutputTypeCurrency","loadingMessage","setLoadingMessage","evt","target","onClick","alert","isValidateInputs","queryParams","fetch","then","res","json","rates","catch","err","console","log","finally","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QAAaA,EAAgB,CAC3B,SAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,MAEA,OC9DWC,G,MAAiB,SAACC,GAC7B,OACE,yBAAKC,UAAU,kBACb,4BAAKD,EAAME,OACX,2BACAD,UAAU,eACRE,KAAM,SACNC,SAAUJ,EAAMK,cAChBC,YAAaN,EAAMO,iBACnBC,MAAOR,EAAMS,WACbC,SAAUV,EAAMW,gBAElB,4BAAQP,SAAUJ,EAAMY,sBACrBd,EAAce,KAAI,SAACV,EAAMW,GAAP,OACjB,4BAAQN,MAAOL,EAAMY,IAAKD,GAAQX,U,MCuD7Ba,MAtEf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAE2BF,mBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,OAIqCJ,mBAAS,IAJ9C,mBAINK,EAJM,KAIaC,EAJb,OAKuCN,mBAAS,IALhD,mBAKNO,EALM,KAKcC,EALd,OAO+BR,mBAAS,IAPxC,mBAONS,EAPM,KAOUC,EAPV,KAoCb,OACE,yBAAK1B,UAAU,aACb,kBAAC,EAAD,CACEC,MAAO,eACPG,cAAe,SAACuB,GACdT,EAAeS,EAAIC,OAAOrB,QAE5BG,eAAe,EACfJ,iBAAkB,0BAClBE,WAAYS,EACZN,qBAAsB,SAACgB,GACrBL,EAAqBK,EAAIC,OAAOrB,UAGpC,6BACE,4BAAQsB,QA3BS,WACrB,GAhBuB,WACvB,GAAIZ,GAAe,EACjBa,MAAM,mCACD,GAA0B,KAAtBT,GAAkD,WAAtBA,EACrCS,MAAM,2CACD,GAA2B,KAAvBP,GAAoD,WAAvBA,EACtCO,MAAM,2CACD,IAAGT,IAAsBE,EAG9B,OAAO,EAFPO,MAAM,wDAIR,OAAO,EAIHC,GAAoB,CACtB,IAAMC,EAAW,iBAAaf,EAAb,iBAAiCI,EAAjC,eAAyDE,GAC1EG,EAAkB,kBAClBO,MAAM,sCAAwCD,GAC3CE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASf,EAAgBe,EAAIE,MAAMd,OACxCe,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAC3BG,SAAQ,kBAAMhB,EAAkB,UAmBjC,WACA,6BACA,8BAAOD,IAGT,kBAAC,EAAD,CACExB,MAAO,gBACPG,cAAe,aACfM,eAAe,EACfJ,iBAAkB,mBAClBE,WAAYW,EACZR,qBAAsB,SAACgB,GACrBH,EAAsBG,EAAIC,OAAOrB,YCvDvBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.79377120.chunk.js","sourcesContent":["export const CurrencyTypes = [\n  \"SELECT\",\n\n  \"AUD\",\n\n  \"BGN\",\n\n  \"BRL\",\n\n  \"CAD\",\n\n  \"CHF\",\n\n  \"CNY\",\n\n  \"CZK\",\n\n  \"DKK\",\n\n  \"EUR\",\n\n  \"GBP\",\n\n  \"HKD\",\n\n  \"HRK\",\n\n  \"HUF\",\n\n  \"IDR\",\n\n  \"ILS\",\n\n  \"INR\",\n\n  \"ISK\",\n\n  \"JPY\",\n\n  \"KRW\",\n\n  \"MXN\",\n\n  \"MYR\",\n\n  \"NOK\",\n\n  \"NZD\",\n\n  \"PHP\",\n\n  \"PLN\",\n\n  \"RON\",\n\n  \"RUB\",\n\n  \"SEK\",\n\n  \"SGD\",\n\n  \"THB\",\n\n  \"TRY\",\n\n  \"USD\",\n\n  \"ZAR\",\n];\n","import React from \"react\";\nimport { CurrencyTypes } from \"../../constants\";\nimport PropsTypes from \"prop-types\";\nimport \"./index.css\";\n\nexport const CurrencyWidget = (props) => {\n  return (\n    <div className='widget-wrapper'>\n      <h3>{props.title}</h3>\n      <input\n      className='widget-input'\n        type={'number'}\n        onChange={props.onInputChange}\n        placeholder={props.inputPlaceholder}\n        value={props.inputValue}\n        disabled={props.inputDisabled}\n      />\n      <select onChange={props.onCurrencyTypeChange}>\n        {CurrencyTypes.map((type, index) => (\n          <option value={type} key={index}>{type}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nCurrencyWidget.propTypes = {\n  title: PropsTypes.string.isRequired,\n  onInputChange: PropsTypes.func.isRequired,\n  inputPlaceholder: PropsTypes.string.isRequired,\n  inputValue: PropsTypes.number.isRequired,\n  onCurrencyTypeChange: PropsTypes.func.isRequired,\n  inputDisabled:PropsTypes.bool.isRequired\n};\n","import React, { useState } from \"react\";\nimport { CurrencyWidget } from \"./Components/CurrencyWidget\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputAmount, setInputAmount] = useState(0);\n  const [outputAmount, setOutputAmount] = useState(0);\n\n  const [inputTypeCurrency, setInputTypeCurrency] = useState(\"\");\n  const [outputTypeCurrency, setOutputTypeCurrency] = useState(\"\");\n\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n\n  const isValidateInputs = () => {\n    if (inputAmount <= 0) {\n      alert(\"Enter a valid input amount\");\n    } else if (inputTypeCurrency === \"\" || inputTypeCurrency === \"SELECT\") {\n      alert(\"Select a valid input currency type\");\n    } else if (outputTypeCurrency === \"\" || outputTypeCurrency === \"SELECT\") {\n      alert(\"Select a valid output currency type\");\n    } else if(inputTypeCurrency === outputTypeCurrency) {\n      alert('Both Input Type & Output Currency local are equal..!');\n    }else {\n      return true;\n    }\n    return false;\n  };\n\n  const onConvertClick = () => {\n    if (isValidateInputs()) {\n      const queryParams = `amount=${inputAmount}&from=${inputTypeCurrency}&to=${outputTypeCurrency}`;\n      setLoadingMessage(\"Please Wait...\");\n      fetch(\"https://api.frankfurter.app/latest?\" + queryParams)\n        .then((res) => res.json()) \n        .then((res) => setOutputAmount(res.rates[outputTypeCurrency]))\n        .catch((err) => console.log(err))\n        .finally(() => setLoadingMessage(\"\"));\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <CurrencyWidget\n        title={\"Input Amount\"}\n        onInputChange={(evt) => {\n          setInputAmount(evt.target.value);\n        }}\n        inputDisabled={false}\n        inputPlaceholder={\"Enter the amount: Ex-30\"}\n        inputValue={inputAmount}\n        onCurrencyTypeChange={(evt) => {\n          setInputTypeCurrency(evt.target.value);\n        }}\n      />\n      <div>\n        <button onClick={onConvertClick}>Convert</button>\n        <br />\n        <span>{loadingMessage}</span> \n      </div>\n\n      <CurrencyWidget\n        title={\"Output Amount\"}\n        onInputChange={() => {}}\n        inputDisabled={true}\n        inputPlaceholder={\"Converted Amount\"}\n        inputValue={outputAmount}\n        onCurrencyTypeChange={(evt) => {\n          setOutputTypeCurrency(evt.target.value);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}